{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar flatten = require( '@stdlib/array-base-flatten' );\nvar slice = require( '@stdlib/array-base-slice' );\n\n\n// FUNCTIONS //\n\n/**\n* Recursive reshapes an array.\n*\n* @private\n* @param {Array} array - input n-dimensional nested array\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {NonNegativeInteger} dim - dimension index\n* @param {NonNegativeInteger} index - sub-array index\n* @returns {Array} output m-dimensional nested array\n*/\nfunction recurse( array, ndims, shape, dim, index ) {\n\tvar stepSize;\n\tvar subArray;\n\tvar out;\n\tvar d;\n\tvar S;\n\tvar i;\n\n\tS = shape[ dim ];\n\tif ( dim === ndims - 1 ) {\n\t\treturn slice( array, index, index + S );\n\t}\n\n\td = dim + 1;\n\tstepSize = 1;\n\tfor ( i = d; i < shape.length; i++ ) {\n\t\tstepSize *= shape[ i ];\n\t}\n\n\tout = [];\n\tfor ( i = 0; i < S; i++ ) {\n\t\tsubArray = recurse( array, ndims, shape, d, index );\n\t\tout.push( subArray );\n\t\tindex += stepSize;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Reshape a nested array into another nested array having a desired shape.\n*\n* @param {Array} x - input nested array\n* @param {NonNegativeIntegerArray} fromShape - shape of the input array\n* @param {NonNegativeIntegerArray} toShape - shape of the output array\n* @param {boolean} colexicographic - specifies whether to reshape the array in colexicographic order\n* @returns {Array} output nested array\n*\n* @example\n* var x = [ [ 1, 2, 3 ], [ 4, 5, 6 ] ];\n*\n* var out = reshape( x, [ 2, 3 ], [ 3, 2 ], false );\n* // returns [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ] ]\n*/\nfunction reshape( x, fromShape, toShape, colexicographic ) {\n\tvar f = flatten( x, fromShape, colexicographic );\n\treturn recurse( f, toShape.length, toShape, 0, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = reshape;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Reshape a nested array into another nested array having a desired shape.\n*\n* @module @stdlib/array-base-reshape\n*\n* @example\n* var reshape = require( '@stdlib/array-base-reshape' );\n*\n* var x = [ [ 1, 2, 3 ], [ 4, 5, 6 ] ];\n*\n* var out = reshape( x, [ 2, 3 ], [ 3, 2 ], false );\n* // returns [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ] ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,4BAA6B,EAChDC,EAAQ,QAAS,0BAA2B,EAgBhD,SAASC,EAASC,EAAOC,EAAOC,EAAOC,EAAKC,EAAQ,CACnD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIP,EAAOC,CAAI,EACVA,IAAQF,EAAQ,EACpB,OAAOH,EAAOE,EAAOI,EAAOA,EAAQK,CAAE,EAKvC,IAFAD,EAAIL,EAAM,EACVE,EAAW,EACLK,EAAIF,EAAGE,EAAIR,EAAM,OAAQQ,IAC9BL,GAAYH,EAAOQ,CAAE,EAItB,IADAH,EAAM,CAAC,EACDG,EAAI,EAAGA,EAAID,EAAGC,IACnBJ,EAAWP,EAASC,EAAOC,EAAOC,EAAOM,EAAGJ,CAAM,EAClDG,EAAI,KAAMD,CAAS,EACnBF,GAASC,EAEV,OAAOE,CACR,CAoBA,SAASI,EAASC,EAAGC,EAAWC,EAASC,EAAkB,CAC1D,IAAIC,EAAInB,EAASe,EAAGC,EAAWE,CAAgB,EAC/C,OAAOhB,EAASiB,EAAGF,EAAQ,OAAQA,EAAS,EAAG,CAAE,CAClD,CAKAlB,EAAO,QAAUe,ICzDjB,IAAIM,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "flatten", "slice", "recurse", "array", "ndims", "shape", "dim", "index", "stepSize", "subArray", "out", "d", "S", "i", "reshape", "x", "fromShape", "toShape", "colexicographic", "f", "main"]
}
